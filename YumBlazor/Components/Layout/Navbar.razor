@using YumBlazor.Components.Pages
@using YumBlazor.Services;
@inject AuthenticationStateProvider authenticationStateProvider;
@inject YumBlazor.Services.SharedStateService sharedStateService;
@inject IRepository<ShoppingCart> shoppingCartRepository;	
@inject NavigationManager NavigationManager;	

<MudPaper Class="mud-elevation-6 px-4" Square Style="@_navbarStyle">
	<MudAppBar Elevation="4" Style="@_navbarStyle">
    <MudGrid AlignItems="Center" Class="w-100">
        <MudItem Grow="false">
				<div class="d-flex align-items-center cursor-pointer" @onclick="NavigateHome" >
					<MudImage Src="/lib/images/Logo.png" Alt="Logo" Width="30" Height="30" Class="mt-2" />
					<MudText Style="@GetStyle()" Typo="Typo.h6" Class="ml-2 mt-2">YumBlazor</MudText>
            </div>
        </MudItem>

			<MudItem Grow="false" Class="mt-1">
				<MudNavLink Style="@GetStyle()" Href="/" Match="NavLinkMatch.All">
					<MudIcon Icon="@Icons.Material.Filled.Home" Class="mr-1" Style="@GetStyle()" />
					Home
				</MudNavLink>
			</MudItem>

			<MudItem Grow="false" Class="mt-1">
				<MudNavLink Style="@GetStyle()" Href="/cart" Match="NavLinkMatch.All">
					<MudIcon Icon="@Icons.Material.Filled.ShoppingCart" Class="mr-1" Style="@GetStyle()" />
					Cart
					(@sharedStateService.TotalCartCount)
				</MudNavLink>
			</MudItem>


			<MudItem Grow="false" Class="mt-1">
				<MudNavLink Style="@GetStyle()" Href="/order/list" Match="NavLinkMatch.All">
					<MudIcon Icon="@Icons.Material.Filled.List" Class="mr-1" Style="@GetStyle()" />
					Order List
				</MudNavLink>
			</MudItem>

			<MudItem Grow="false" Class="ml-auto">
				<div class="d-flex align-items-center">
					<AuthorizeView>
						<Authorized>
							<MudNavLink Style="@GetStyle()" Href="Account/Manage" Match="NavLinkMatch.All" Class="mr-2">
								<MudIcon Icon="@Icons.Material.Filled.Person" Style="@GetStyle()" Class="mr-1" />
								Welcome, @context?.User?.Identity?.Name
							</MudNavLink>

							<form action="Account/Logout" method="post" class="m-0">
								<AntiforgeryToken />
								<input type="hidden" name="ReturnUrl" value="" />
								<button type="submit" class="mud-nav-link d-flex align-items-center ml-2" style="background:none;border:none;padding:0;margin:0;cursor:pointer;@GetStyle()">
									<MudIcon Icon="@Icons.Material.Filled.Logout" Class="mr-1" Style="@GetStyle()" />
									Logout
								</button>
							</form>
						</Authorized>

						<NotAuthorized>
							<MudNavLink Style="@GetStyle()" Href="Account/Register" Match="NavLinkMatch.All" Class="mr-2">
								<div class="d-flex align-items-center">
									<MudIcon Icon="@Icons.Material.Filled.PersonAdd" Style="@GetStyle()" Class="mr-1" />
									Register
								</div>
							</MudNavLink>

							<MudNavLink Style="@GetStyle()" Href="Account/Login" Match="NavLinkMatch.All" Class="mr-2">
								<div class="d-flex align-items-center">
									<MudIcon Icon="@Icons.Material.Filled.Login" Style="@GetStyle()" Class="mr-1" />
									Login
								</div>
							</MudNavLink>
						</NotAuthorized>
					</AuthorizeView>

					<MudIconButton Icon="@GetDarkModeIcon()"
								   OnClick="ToggleDarkModeFromNavbar"
								   Style="@GetStyle()" />
				</div>
			</MudItem>
    </MudGrid>
</MudAppBar>
</MudPaper>



@code{

	[Parameter]
	public EventCallback OnToggleDarkMode { get; set; }

	[Parameter]
	public bool _isDarkMode { get; set; }


	[CascadingParameter]
	public MudThemeProvider? ThemeProvider { get; set; }

	private string _backgroundColor => _isDarkMode ? "#2a103d" : "#f5e9ff";
	private string _textColor => _isDarkMode ? "#ffffff" : "#000000";
	private string _navbarStyle => $"background-color: {_backgroundColor}; color: {_textColor};";

	private string GetStyle()
	{
		return $"color: {(_isDarkMode ? "#ffffff" : "#000000")}";
	}

	protected override async Task OnInitializedAsync()
	{
		sharedStateService.OnChange += OnSharedStateChange;
		await GetInitialCount();

	}

	private async Task ToggleDarkModeFromNavbar()
	{
		await OnToggleDarkMode.InvokeAsync();
	}

	private string GetDarkModeIcon()
	{
		return _isDarkMode ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode;
	}

	private void OnSharedStateChange()
	{
		InvokeAsync(StateHasChanged);
	}	


	public async Task GetInitialCount(){
			var user = (await authenticationStateProvider.GetAuthenticationStateAsync()).User;
			if (user.Identity.IsAuthenticated)
				{
					var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
					var cart = (await shoppingCartRepository.GetAllAsync()).Where(c => c.UserId == userId).FirstOrDefault();
					if (cart != null)
					{
						sharedStateService.TotalCartCount = (cart.Count);
					}
					else
					{
						sharedStateService.TotalCartCount = 0;
					}
				}
			else
				{
					sharedStateService.TotalCartCount = 0;
				}
		}

	public void Dispose()
	{
		sharedStateService.OnChange -= OnSharedStateChange;
	}	

	private void ToggleDarkMode()
	{
		_isDarkMode = !_isDarkMode;
		StateHasChanged();
	}


	private void NavigateHome()
	{
		NavigationManager.NavigateTo("/");
	}
}