@implements IDisposable

@inject NavigationManager NavigationManager

<MudNavMenu>
    <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
    <MudNavLink Href="category" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Category">Categories</MudNavLink>
    <MudNavLink Href="product" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Coffee">Products</MudNavLink>
    <MudNavLink Href="/order/list" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.List">Order List</MudNavLink>
     <AuthorizeView>
        <MudNavLink Href="Account/Manage" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Person">@context.User.Identity?.Name</MudNavLink>
        <div style="padding: 0.5rem 1rem;">
            <form action="Account/Logout" method="post" style="margin: 0;">
                <AntiforgeryToken />
                <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                <button type="submit" style="all: unset; cursor: pointer; display: flex; align-items: center;">
                    <MudIcon Icon="@Icons.Material.Filled.Logout" Class="mud-nav-link-icon mud-icon-size-medium" />
                    <span style="margin-left: 8px;">Logout</span>
                </button>
            </form>
        </div>
     </AuthorizeView>
</MudNavMenu>


@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

