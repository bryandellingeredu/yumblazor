@page "/order/details/{orderId:guid}"
@using System.Globalization
@using YumBlazor.Utility
@inject IRepository<Models.OrderHeader> _orderRepository

@if (IsProcessing)
{
    <MudPaper Class="d-flex flex-column align-items-center justify-center" Style="height: 100vh; width: 100%;">
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Diameter="100" />
    </MudPaper>
}
else
{
    <MudContainer MaxWidth="MaxWidth.Medium" Class="my-6">
        <MudPaper Class="p-6">
            <MudText Typo="Typo.h5" Color="Color.Success" Align="Align.Center" Class="mb-4">
                ORDER DETAILS
            </MudText>
            <MudDivider Class="mb-3" />
            <MudStack Spacing="2" Class="mb-3">
                <MudText>Order Id: @orderHeader.Id</MudText>
                <MudText>Name: @orderHeader.Name</MudText>
                <MudText>Email: @orderHeader.Email</MudText>
                <MudText>Phone: @orderHeader.PhoneNumber</MudText>
                <MudText>Order Status: @orderHeader.Status</MudText>
            </MudStack>
            <MudDivider Class="mb-3" />
            <MudText Typo="Typo.h6" Color="Color.Success" Class="mb-3">
                Menu Items
            </MudText>
            @foreach (var order in orderHeader.OrderDetails)
            {
                <MudPaper Class="p-2 mb-2" Elevation="1">
                    <MudStack Row="true" Justify="Justify.SpaceBetween">
                        <MudText> @order.ProductName </MudText>
                        <MudText> @order.Price.ToString("C", CultureInfo.GetCultureInfo("en-us")) X @order.Count </MudText>
                    </MudStack>
                    <MudText Class="ps-4">
                        @((order.Price * order.Count).ToString("C", CultureInfo.GetCultureInfo("en-us")))
                    </MudText>
                </MudPaper>
            }
            <MudDivider Class="my-3" />
            <MudStack Row="true" Justify="Justify.SpaceBetween">
                <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Secondary" Href="/order/list" Style="width:150px;">
                    Back
                </MudButton>
                @if (orderHeader.Status != SD.StatusCancelled && orderHeader.Status != SD.StatusCompleted && IsAdmin)
                {
                    <MudStack Row="true" Spacing="2">
                        <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Error" OnClick="() => UpdateStatus(SD.StatusCancelled)" Style="width:150px;">
                            Cancel Order
                        </MudButton>

                        @if (orderHeader.Status == SD.StatusApproved)
                        {
                            <MudButton Variant="MudBlazor.Variant.Filled" " Color="Color.Primary" OnClick="() => UpdateStatus(SD.StatusReadyForPickup)" Style="width:150px;">
                               Pickup
                            </MudButton>
                        }
                        @if (orderHeader.Status == SD.StatusReadyForPickup)
                        {
                            <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Success" OnClick="() => UpdateStatus(SD.StatusCompleted)" Style="width:150px;">
                                Completed
                            </MudButton>
                        }
                    </MudStack>
                }
             </MudStack>
        </MudPaper>
    </MudContainer>
}


@code {
    public bool IsProcessing { get; set; } = true;

    private bool IsAdmin { get; set; } = false;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    [Parameter]
    public Guid orderId { get; set; }

    private OrderHeader orderHeader = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
   

            var authState = await AuthenticationState;
            var user = authState.User;
            IsAdmin = user.IsInRole(SD.Role_Admin);

            orderHeader = (await _orderRepository.GetAllIncludingAsync("OrderDetails"))
            .Where(x => x.Id == orderId)  
            .FirstOrDefault()
            ?? new OrderHeader();  

            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task UpdateStatus(string newStatus)
    {
        orderHeader.Status = newStatus;

        var orderToUpdate = await _orderRepository.GetByIdAsync(orderHeader.Id);
        if (orderToUpdate != null)
        {
            orderToUpdate.Status = newStatus;
            await _orderRepository.UpdateAsync(orderToUpdate);
        }  
        StateHasChanged();
    }
}
