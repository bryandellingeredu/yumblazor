@page "/order/details/{orderId:guid}"
@using System.Globalization
@using YumBlazor.Utility
@inject IRepository<Models.OrderHeader> _orderRepository

@if (IsProcessing)
{
    <div class="position-absolute w-100 h-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/lib/images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="container my-5 mx-auto p-5 w-100" style="max-width: 950px;">
        <div class="card" style="max-width: 750px;">
            <div class="pt-3 text-success text-center">
                <span class="h4"> ORDER DETAILS</span>
            </div>

            <hr />
            <div class="px-3">
                <p>Order Id: @orderHeader.Id</p>
                <p>Name: @orderHeader.Name</p>
                <p>Email: @orderHeader.Email</p>
                <p>Phone: @orderHeader.PhoneNumber</p>
                <p>Order Status: @orderHeader.Status </p>
            </div>
            <hr />
            <div class="card-body">
                <h4 class="text-success">Menu Items</h4>

                @foreach (var order in orderHeader.OrderDetails)
                {


                    <div class="d-flex">
                        <div class="d-flex w-100 justify-content-between">
                        <p>
                            &nbsp; -- @order.ProductName
                        </p>
                        <p>
                           @order.Price.ToString("C", CultureInfo.GetCultureInfo("en-us")) X @order.Count
                        </p>
                    </div>
                    <div class="ps-4">
                            @((order.Price * order.Count).ToString("C", CultureInfo.GetCultureInfo("en-us")))
                    </div>

                </div>

                }
                <hr />
                <h4 class="text-success text-end">
                    @orderHeader.OrderTotal.ToString("C", CultureInfo.GetCultureInfo("en-us"))
                </h4>
                <hr />

                <div class="row">
                    <div class="col-5">
                        <a href="order/list" class="btn btn-secondary  m-2 p-2" style="width:150px;">Back to Orders</a>
                    </div>
                    <div class="col-7 text-end">
                        @if (orderHeader.Status != SD.StatusCancelled && orderHeader.Status != SD.StatusCompleted && IsAdmin)
                        {
                            <button class="btn btn-danger m-2 p-2" style="width:150px;" @onclick="()=>UpdateStatus(SD.StatusCancelled)">Cancel Order</button>

                            @if(orderHeader.Status == SD.StatusApproved)
                            {
                                <button class="btn btn-primary m-2 p-2" style="width:150px;" @onclick="() => UpdateStatus(SD.StatusReadyForPickup)">Ready for Pickup</button>
                            }
                            @if (orderHeader.Status == SD.StatusReadyForPickup)
                            {
                                <button class="btn btn-success m-2 p-2" style="width:150px;" @onclick="() => UpdateStatus(SD.StatusCompleted)">Completed</button>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@code {
    public bool IsProcessing { get; set; } = true;

    private bool IsAdmin { get; set; } = false;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    [Parameter]
    public Guid orderId { get; set; }

    private OrderHeader orderHeader = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
   

            var authState = await AuthenticationState;
            var user = authState.User;
            IsAdmin = user.IsInRole(SD.Role_Admin);

            orderHeader = (await _orderRepository.GetAllIncludingAsync("OrderDetails"))
            .Where(x => x.Id == orderId)  
            .FirstOrDefault()
            ?? new OrderHeader();  

            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task UpdateStatus(string newStatus)
    {
        orderHeader.Status = newStatus;

        var orderToUpdate = await _orderRepository.GetByIdAsync(orderHeader.Id);
        if (orderToUpdate != null)
        {
            orderToUpdate.Status = newStatus;
            await _orderRepository.UpdateAsync(orderToUpdate);
        }  
        StateHasChanged();
    }
}
