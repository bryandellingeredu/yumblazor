@page "/order/list"
@using System.Globalization
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using YumBlazor.Utility
@inject IRepository<Models.OrderHeader> _orderRepository 
@inject NavigationManager NavigationManager
@attribute [Authorize]

@if (IsProcessing)
{
    <MudPaper Class="d-flex flex-column align-items-center justify-center" Style="height: 100vh; width: 100%;">
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Diameter="100" />
    </MudPaper>
}
else
{

     <MudPaper Class="shadow mt-4">
        <MudPaper Class="bg-black py-2 px-3">
            <MudText Typo="Typo.h5" Align="Align.Center" Class="text-white">
                Order List
            </MudText>
        </MudPaper>
     </MudPaper>

      <MudPaper Class="p-4" Style="width: 100%;">

        <MudTextField @bind-Value="searchString"
                      Immediate="true"
                      Placeholder="Search by name"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      Margin="Margin.Dense"
                      Class="mb-3" />

        <MudTable Items="orders"
                      Filter="FilterFunc"
                      RowsPerPage="10"
                      Hover="true"
                      Bordered="true"
                      Striped="true"
                      Dense="true"
                      SortLabel="Sort By">
                <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<OrderHeader, object>(x => x.Id)">
                        Id
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<OrderHeader, object>(x => x.Name)">
                        Name
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<OrderHeader, object>(x => x.PhoneNumber)">
                        Phone
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<OrderHeader, object>(x => x.Email)">
                        Email
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<OrderHeader, object>(x => x.OrderTotal)">
                        Order Total
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<OrderHeader, object>(x => x.OrderDate)">
                        Order Date
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<OrderHeader, object>(x => x.Status)">
                        Order Status
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                </MudTh>
            </HeaderContent>
              <RowTemplate>
                    <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Phone">@context.PhoneNumber</MudTd>
                <MudTd DataLabel="Email">@context.Email</MudTd>
                <MudTd DataLabel="Order Total">@context.OrderTotal.ToString("C", CultureInfo.CurrentCulture)</MudTd>
                <MudTd DataLabel="Order Date">@context.OrderDate.ToString("d", CultureInfo.CurrentCulture)</MudTd>
                <MudTd DataLabel="Order Status">@context.Status</MudTd>
                <MudTd Align="Right">
                    <MudStack Row="true" Justify="Justify.FlexEnd" Spacing="2">
                        <MudButton Variant="MudBlazor.Variant.Filled"
                                   Color="Color.Secondary"
                                   StartIcon="@Icons.Material.Filled.Details"
                                   OnClick="@(() => NavigationManager.NavigateTo($"order/details/{context.Id}"))">
                            Details
                        </MudButton>
                    </MudStack>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
         </MudTable>

      </MudPaper>

}

@code {
    public bool IsProcessing { get; set; } = true;
    private List<Models.OrderHeader> orders { get; set; } = new();
    private bool? IsAdmin { get; set; } = null;
    private string? UserId { get; set; } = null;    

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }  

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CheckAuthorization();
            if (IsAdmin is not null && IsAdmin.Value)
            {
                orders = (await _orderRepository.GetAllAsync()).ToList();
            }
            else
            {
                orders = (await _orderRepository.GetAllAsync()).Where(x => x.UserId == UserId).ToList();
             }
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task CheckAuthorization()
    {
       if(AuthenticationState is not null)
       {
           var authState = await AuthenticationState;
          var user = authState.User;
           IsAdmin = user.IsInRole(SD.Role_Admin);
           UserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;   
        }
    }

    private string searchString = string.Empty;

    private bool FilterFunc(OrderHeader order)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        return order.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }
}
