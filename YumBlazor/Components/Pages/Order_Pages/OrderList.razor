@page "/order/list"
@using System.Globalization
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using YumBlazor.Utility
@inject IRepository<Models.OrderHeader> _orderRepository 
@inject NavigationManager NavigationManager
@attribute [Authorize]

@if (IsProcessing)
{
    <div class="position-absolute w-100 h-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/lib/images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="card shadow border-0 m-4">
        <div class="card-header bg-black bg-gradient ms-lg-0 py-2">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">Order List</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">

            @if (orders.Any()){


            <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
    Data="@orders" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" >
    <Columns>
        <RadzenDataGridColumn Property="Id" Filterable="true" Title="ID" Frozen="true" Width="80px"  />

                        <RadzenDataGridColumn Property="Name" Title="Name"  Width="120px" />
                        <RadzenDataGridColumn Property="PhoneNumber" Title="Phone"  Width="120px" />
                        <RadzenDataGridColumn Property="Email" Title="Email" Width="120px" />
                        <RadzenDataGridColumn Property="OrderTotal" Title="Order Total" FormatString="{0:C}" Width="120px" />
                        <RadzenDataGridColumn Property="OrderDate" Title="Order Date" FormatString="{0:d}"  Width="120px" />
                        <RadzenDataGridColumn Property="Status" Title="Order Status"  Width="120px" />
                        <RadzenDataGridColumn Title="Action" Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center">
                            <Template Context="order">
                                <RadzenButton Shade="Shade.Lighter" Text="Details" ButtonStyle="ButtonStyle.Primary"
                                Click="@(() => NavigationManager.NavigateTo($"order/details/{order.Id}"))" /> 
                            </Template>
                        </RadzenDataGridColumn>

    </Columns>
</RadzenDataGrid>
            }
        </div>
    </div>
}

@code {
    public bool IsProcessing { get; set; } = true;
    private List<Models.OrderHeader> orders { get; set; } = new();
    private bool? IsAdmin { get; set; } = null;
    private string? UserId { get; set; } = null;    

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }  

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CheckAuthorization();
            if (IsAdmin is not null && IsAdmin.Value)
            {
                orders = (await _orderRepository.GetAllAsync()).ToList();
            }
            else
            {
                orders = (await _orderRepository.GetAllAsync()).Where(x => x.UserId == UserId).ToList();
             }
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task CheckAuthorization()
    {
       if(AuthenticationState is not null)
       {
           var authState = await AuthenticationState;
          var user = authState.User;
           IsAdmin = user.IsInRole(SD.Role_Admin);
           UserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;   
        }
    }
}
