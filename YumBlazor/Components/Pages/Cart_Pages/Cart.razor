@page "/cart"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using System.Globalization
@using YumBlazor.Services
@using YumBlazor.Utility
@inject IRepository<Models.ShoppingCart> _cartRepository
@inject IRepository<Models.OrderHeader> _orderRepository    
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager 
@inject YumBlazor.Services.SharedStateService sharedStateService;
@inject PaymentService paymentService;  
@attribute [Authorize]

<PageTitle>Cart</PageTitle>
@if (IsProcessing) 
{
    <MudPaper Class="d-flex flex-column align-items-center justify-center" Style="height: 100vh; width: 100%;">
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Diameter="100" />
    </MudPaper>
}
else
{
if(shoppingCarts.Any()){

    <MudGrid Class="w-100">
            <!-- Cart Summary -->
            <MudItem xs="12" lg="6">
                 <MudPaper Class="p-4 m-2">
                    <MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Success">
                        Cart Summary
                    </MudText>

                     @foreach (var cartItem in shoppingCarts)
                        {
                         <MudPaper Class="d-flex p-5 my-3" Elevation="1">
                            <MudGrid Class="mb-3" Style="height: 150px; background-color: var(--mud-palette-surface); border-radius: 6px;">
                                <!-- Column 1: Image -->
                                <MudItem xs="3" Class="p-0">
                                    <img src="@(cartItem.Product.ImageUrl ?? "/lib/images/default.png")"
                                         alt="@cartItem.Product.Name"
                                         style="height: 100%; width: 100%; object-fit: cover; border-top-left-radius: 6px; border-bottom-left-radius: 6px;" />
                                </MudItem>

                                <!-- Column 2: Info -->
                                <MudItem xs="6" Class="d-flex flex-column justify-between p-2">
                                    <div>
                                        <MudText Typo="Typo.h6" >@cartItem.Product.Name</MudText>
                                        <MudText Typo="Typo.body2" Color="Color.Error">
                                            @cartItem.Product.Price.ToString("C", CultureInfo.GetCultureInfo("en-us"))
                                        </MudText>
                                    </div>
                                    <div class="d-flex align-items-center mt-auto">
                                        <MudIconButton Disabled="@(cartItem.Count <= 1)"
                                                       Icon="@Icons.Material.Filled.RemoveCircle"
                                                       OnClick="@(() => UpdateCartItem(cartItem.ProductId, -1))" />
                                        <MudText Class="mx-2">@cartItem.Count</MudText>
                                        <MudIconButton Icon="@Icons.Material.Filled.AddCircle"
                                                       OnClick="@(() => UpdateCartItem(cartItem.ProductId, 1))" />
                                    </div>
                                </MudItem>

                                <!-- Column 3: Total & Remove -->
                                <MudItem xs="3" Class="d-flex flex-column justify-between align-end p-2" Style="height: 100%;">
                                    <MudText Typo="Typo.h6" >
                                        @((cartItem.Count * cartItem.Product.Price).ToString("C", CultureInfo.GetCultureInfo("en-us")))
                                    </MudText>

                                    <div style="margin-top: auto;">
                                        <MudButton Color="Color.Error"
                                                   Variant="MudBlazor.Variant.Filled"
                                                   Size="Size.Small"
                                                   OnClick="@(() => remove(cartItem.ProductId))">
                                            Remove
                                        </MudButton>
                                    </div>
                                </MudItem>
                            </MudGrid>
                       
                         </MudPaper>
                    }

                 </MudPaper>
            </MudItem>

             <MudItem xs="12" lg="6">
                  <MudPaper Class="p-4 m-2">
                    <MudCard Class="p-0">
                        <MudCardHeader Class="text-center">
                            <MudText Typo="Typo.h4" Color="Color.Success">
                                Pickup Details
                            </MudText>
                        </MudCardHeader>

                    <MudForm @ref="_form">
                        <MudCardContent>
                            <MudTextField Label="Name"
                                          @bind-Value="OrderHeader.Name"
                                          For="@(() => OrderHeader.Name)"
                                          Required="true"
                                          Variant="MudBlazor.Variant.Filled"
                                          Margin="Margin.Dense"
                                          FullWidth="true" />

                            <MudTextField Label="Email"
                                          @bind-Value="OrderHeader.Email"
                                          For="@(() => OrderHeader.Email)"
                                          Required="true"
                                          Variant="MudBlazor.Variant.Filled"
                                          Margin="Margin.Dense"
                                          FullWidth="true" />

                            <MudTextField Label="Phone"
                                          @bind-Value="OrderHeader.PhoneNumber"
                                          For="@(() => OrderHeader.PhoneNumber)"
                                          Required="true"
                                          Variant="MudBlazor.Variant.Filled"
                                          Margin="Margin.Dense"
                                          FullWidth="true" />

                            <MudPaper Class="mt-4 pa-3" Style="background-color: var(--mud-palette-background-grey);">
                                <MudText Typo="Typo.h6">
                                    Grand Total:
                                    @(shoppingCarts.Sum(c => c.Count * c.Product.Price)
                                                                    .ToString("C", CultureInfo.GetCultureInfo("en-us")))
                            </MudText>
                            <MudText Typo="Typo.h6">
                                No. of Items: @shoppingCarts.Sum(c => c.Count)
                            </MudText>
                        </MudPaper>
                    </MudCardContent>

                            <MudCardActions Class="justify-center">
                                <MudButton Color="Color.Success"
                                           Variant="MudBlazor.Variant.Filled"
                                           Class="m-2"
                                           OnClick="OnSubmit">
                                    Looks Good? Place Order!
                                </MudButton>
                            </MudCardActions>
                        </MudForm>
                    </MudCard>
                  </MudPaper>
                  
             </MudItem>

    </MudGrid>

    }
    else
    {
        <MudPaper Class="p-4">
            <MudAlert Severity="Severity.Warning" Elevation="1">
                Your cart is empty! Please add items to cart.
            </MudAlert>
        </MudPaper>
    }
}
 @code
{
    public bool IsProcessing { get; set; } = true;
    private List<Models.ShoppingCart> shoppingCarts { get; set; } = new();
    private string _userId { get; set; } = string.Empty;

    [SupplyParameterFromForm]
    public OrderHeader OrderHeader { get; set; }
    = new OrderHeader();

    private MudForm? _form;

    private async Task OnSubmit()
    {
        if (_form is not null)
        {
            await _form.Validate();

            if (_form.IsValid)
            {
                await ProcessOrderCreation();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState
               = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        OrderHeader.Email = user.FindFirst(u => u.Type.Contains("email"))?.Value;
        OrderHeader.UserId =  user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        OrderHeader.Status = SD.StatusPending;  
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState
                = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            _userId = userId;

            shoppingCarts
                = (await _cartRepository.GetAllIncludingAsync("Product", "User"))
                      .Where(x => x.UserId == userId)
                      .ToList();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task UpdateCartItem(Guid productId, int updateBy)
    {
        var existingCartItem = shoppingCarts.First(
            x => x.UserId == _userId && x.ProductId == productId);

        existingCartItem.Count += updateBy;

        if (existingCartItem.Count < 1)
        {
            existingCartItem.Count = 1;
        }

        await _cartRepository.UpdateAsync(existingCartItem);

        sharedStateService.TotalCartCount = (await _cartRepository.GetAllAsync()).Where(x => x.UserId == _userId).Sum(x => x.Count);


        StateHasChanged(); // This tells Blazor to re-render the UI
    }

    private async Task remove(Guid productId)
    {

        var existingCartItem = shoppingCarts.FirstOrDefault(
            x => x.UserId == _userId && x.ProductId == productId);

        if (existingCartItem is not null)
        {
            await _cartRepository.DeleteAsync(existingCartItem.Id);
            shoppingCarts.Remove(existingCartItem);
            sharedStateService.TotalCartCount = (await _cartRepository.GetAllAsync()).Where(x => x.UserId == _userId).Sum(x => x.Count);
            StateHasChanged();
        }
    }

    private async Task ProcessOrderCreation()
    {
        IsProcessing = true;
        await Task.Yield();
        OrderHeader.OrderDetails = SD.ConvertShoppingCartListToOrderDetail(shoppingCarts);

        var session =  paymentService.CreateStripeCheckoutSession(OrderHeader);
        Models.OrderHeader orderHeader = new();
        orderHeader.Id = Guid.NewGuid();
        orderHeader.OrderDate = DateTime.Now;
        orderHeader.UserId = _userId;
        orderHeader.Email = OrderHeader.Email;
        orderHeader.Name = OrderHeader.Name; 
        orderHeader.PhoneNumber = OrderHeader.PhoneNumber;
        orderHeader.Status = SD.StatusPending;
        orderHeader.OrderDetails = OrderHeader.OrderDetails;
        orderHeader.OrderTotal = (double)shoppingCarts.Sum(c => c.Count * c.Product.Price);
        orderHeader.SessionId = session.Id;  

        await _orderRepository.AddAsync(orderHeader);
        await _cartRepository.DeleteRangeAsync(shoppingCarts);
        sharedStateService.TotalCartCount = (await _cartRepository.GetAllAsync()).Where(x => x.UserId == _userId).Sum(x => x.Count);
        NavigationManager.NavigateTo(session.Url);  
    }


   }


