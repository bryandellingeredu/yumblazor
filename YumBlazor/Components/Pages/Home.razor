@page "/"
@using System.Globalization
@using System.Security.Claims
@inject IRepository<Models.Product> _productRepository
@inject IRepository<Models.Category> _categoryRepository
@inject IRepository<Models.ShoppingCart> _cartRepository
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject YumBlazor.Services.SharedStateService sharedStateService;


<PageTitle>Home</PageTitle>
@if (IsProcessing)
{
    <MudPaper Class="d-flex flex-column align-items-center justify-center" Style="height: 100vh; width: 100%;">
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Diameter="100"/>
    </MudPaper>
}
else
{

    <MudContainer MaxWidth="MaxWidth.False" Class="px-0 m-0">
        <MudPaper Class="d-flex align-items-center justify-center"
                  Style="
                  height: 50vh;
                  background-image: url('/lib/images/coffee.jpg');
                  background-size: cover;
                  background-position: center;
                  background-repeat: no-repeat;
                  ">
        >

            <MudGrid Justify="Justify.Center">
                <MudItem xs="12" sm="8" md="6" lg="4">
                    <MudPaper Elevation="2" Class="pa-2" Style="border-radius: 50px; background-color: rgba(255, 255, 255, 0.85);">
                        <MudTextField @bind-Value="searchString"
                                      Immediate="true"
                                      Label="Search for Food Items!"
                                      Adornment="Adornment.End"
                                      AdornmentIcon="@Icons.Material.Filled.Search"
                                      Variant="MudBlazor.Variant.Filled"
                                      Margin="Margin.Dense"
                                      Class="rounded-pill"
                                      Style="border-radius: 50px; padding-left: 20px; padding-right: 20px; height: 48px;" />
                    </MudPaper>
                </MudItem>

            </MudGrid>

        </MudPaper>
          <MudTabs Centered="true" Rounded="true" Class="mb-4">
            <MudTabPanel Text="All" OnClick="() => HandleCategoryChange(Guid.Empty)" />
            @foreach (var category in categories)
            {
                <MudTabPanel Text="@category.Name" OnClick="() => HandleCategoryChange(category.Id)" />
            }
          </MudTabs>


          <MudGrid Gutter="GutterSize.Small">
               @foreach (var product in filteredProducts)
            {
                 <MudItem xs="12" sm="6" md="4" lg="4">
                    <MudCard Class="mb-5">
                        <MudCardMedia Image="@(!string.IsNullOrEmpty(product.ImageUrl) ? product.ImageUrl : "/lib/images/default.png")" Height="400" />

                        <MudCardContent>
                            <MudText Typo="Typo.h5" Align="Align.Center" Color="Color.Success">
                                @product.Name
                            </MudText>

                            <MudGrid Class="mt-2 mb-2">
                                <MudItem xs="6">
                                    @if (!string.IsNullOrEmpty(product.SpecialTag))
                                    {
                                        <MudChip T="string" Color="Color.Success" Variant="MudBlazor.Variant.Outlined" StartIcon="@Icons.Material.Filled.Star">
                                            @product.SpecialTag
                                        </MudChip>
                                    }
                                </MudItem>
                                <MudItem xs="6" Class="d-flex justify-end align-center">
                                    <MudText Typo="Typo.h6" Color="Color.Error">
                                        @product.Price.ToString("C", CultureInfo.GetCultureInfo("en-us"))
                                    </MudText>
                                </MudItem>
                            </MudGrid>

                            <MudText Typo="Typo.body2">@((MarkupString)product.Description)</MudText>
                        </MudCardContent>

                        <MudCardActions Class="justify-center">
                            <MudButton Color="Color.Primary" Variant="MudBlazor.Variant.Filled" OnClick="() => AddOrderItem(product)">
                                <MudIcon Icon="@Icons.Material.Filled.AddShoppingCart" Class="me-1" /> Add to Cart
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                 </MudItem>
            }
        </MudGrid>


    </MudContainer>

    }
@code{
    private string _searchString = string.Empty;

    private string searchString
    {
        get => _searchString;
        set
        {
            _searchString = value;
            DebounceFilter();
        }
    }

    private System.Timers.Timer? _debounceTimer;
    private const int DebounceDelay = 300; // milliseconds

    IEnumerable<Models.Product> products { get; set; } = new List<Models.Product>(); 
    IEnumerable<Models.Product> filteredProducts { get; set; } = new List<Models.Product>();
    IEnumerable<Models.Category> categories { get; set; } = new List<Models.Category>();
    IEnumerable<Models.ShoppingCart> shoppingCarts { get; set; } = new List<Models.ShoppingCart>();
    private Guid _selectedCategoryId = Guid.Empty;

    public bool IsProcessing { get; set; } = true;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            products = (await _productRepository.GetAllAsync()).ToList();
            filteredProducts = products;
            var allCategories = (await _categoryRepository.GetAllAsync()).ToList();
            shoppingCarts = (await _cartRepository.GetAllIncludingAsync("Product", "User")).ToList();
            categories = allCategories
            .Where(c => products.Any(p => p.CategoryId == c.Id))
            .OrderBy(c => c.Name)
            .ToList();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private void DebounceFilter()
    {
        _debounceTimer?.Stop();
        _debounceTimer?.Dispose();

        _debounceTimer = new System.Timers.Timer(DebounceDelay);
        _debounceTimer.Elapsed += (_, _) =>
        {
            _debounceTimer?.Stop();
            _debounceTimer?.Dispose();
            _debounceTimer = null;

            // Filter on the UI thread
            InvokeAsync(() => FilterProducts());
        };
        _debounceTimer.AutoReset = false;
        _debounceTimer.Start();
    }

    private void HandleCategoryChange(Guid categoryId)
    {
        _selectedCategoryId = categoryId;
        FilterProducts();
    }

    private void FilterProducts()
    {
        filteredProducts = products
            .Where(p =>
                (_selectedCategoryId == Guid.Empty || p.CategoryId == _selectedCategoryId) &&
                (string.IsNullOrWhiteSpace(searchString) ||
                 (!string.IsNullOrEmpty(p.Name) &&
                  p.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)))
            )
            .ToList();

        StateHasChanged();
    }

    private async Task AddOrderItem(Models.Product product)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var authenticated = user.Identity is not null && user.Identity.IsAuthenticated;

        if (!authenticated)
        {
            NavigationManager.NavigateTo("/Account/Login", forceLoad: true);
            return;
        }

        var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (string.IsNullOrEmpty(userId))
        {
            return; // Unexpected: no user ID found
        }

        // Find if the user already has this product in the cart
        var existingCartItem = shoppingCarts
            .FirstOrDefault(x => x.UserId == userId && x.ProductId == product.Id);

        if (existingCartItem is not null)
        {
            existingCartItem.Count++;
            await _cartRepository.UpdateAsync(existingCartItem);
        }
        else
        {
            var newCartItem = new ShoppingCart
            {
                UserId = userId,
                ProductId = product.Id,
                Count = 1
            };
            await _cartRepository.AddAsync(newCartItem);
        }
        sharedStateService.TotalCartCount = (await _cartRepository.GetAllAsync()).Where(x => x.UserId == userId).Sum(x => x.Count);
        JS?.ToastrSuccess("Product added to cart succesfully");
    }
  



}