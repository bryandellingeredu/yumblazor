@inject IRepository<Product> Repository
@inject IRepository<Category> CategoryRepository    
@page "/product"
@using System.Globalization
@inject IWebHostEnvironment WebHostEnvironment
@inject IDialogService DialogService
@inject ISnackbar Snackbar


@if (IsProcessing)
{
    <MudPaper Class="d-flex flex-column align-items-center justify-center" Style="height: 100vh; width: 100%;">
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Diameter="100" />
    </MudPaper>
}
else
{
       <MudPaper Class="shadow mt-4">
        <MudPaper Class="bg-black py-2 px-3">
            <MudText Typo="Typo.h5" Align="Align.Center" Class="text-white">
                Product List
            </MudText>
        </MudPaper>

        <MudPaper Class="p-4" Style="width: 100%;">
              <MudStack Row="true" Justify="Justify.FlexEnd" Class="pb-3">
                <MudButton Variant="MudBlazor.Variant.Filled"
                           Color="Color.Secondary"
                           StartIcon="@Icons.Material.Filled.Add"
                           Href="product/create"
                           Style="width:200px;">
                    Add
                </MudButton>
            </MudStack>


            <MudTextField @bind-Value="searchString"
                          Placeholder="Search by name"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          Margin="Margin.Dense"
                          Class="mb-3" />

                  <MudTable Items="_products"
                      Filter="FilterFunc"
                      RowsPerPage="10"
                      Hover="true"
                      Bordered="true"
                      Striped="true"
                      Dense="true"
                      SortLabel="Sort By">

                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<Product, object>(x => x.Name)">
                            Name
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<Product, object>(x => x.Price)">
                            Price
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<Product, object>(x => x.SpecialTag??String.Empty)">
                            Special
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<Product, object>(x => x.Category.Name)">
                            Category
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                  <RowTemplate>
                      <MudTd DataLabel="Name">@context.Name</MudTd>
                    <MudTd DataLabel="Price">@context.Price.ToString("C", CultureInfo.GetCultureInfo("en-us"))</MudTd>
                    <MudTd DataLabel="Special">
                        @if (!string.IsNullOrEmpty(@context.SpecialTag))
                        {
                            <span class="badge text -bg-info">@context.SpecialTag</span>   
                        }
                    </MudTd>
                    <MudTd DataLabel="Category">@context.Category.Name</MudTd>
                    <MudTd Align="Right">
                        <MudStack Row="true" Justify="Justify.FlexEnd" Spacing="2">
                            <MudButton Variant="MudBlazor.Variant.Filled"
                                       Color="Color.Secondary"
                                       StartIcon="@Icons.Material.Filled.Edit"
                                       Href="@($"product/update/{context.Id}")"
                                       Style="width: 100px;">
                                Edit
                            </MudButton>
                            <MudButton Variant="MudBlazor.Variant.Filled"
                                       Color="Color.Error"
                                       StartIcon="@Icons.Material.Filled.Delete"
                                       OnClick="@(() => HandleDelete(context.Id))"
                                       Style="width: 100px;">
                                Delete
                            </MudButton>
                        </MudStack>
                    </MudTd>
                  </RowTemplate>
                  
                  </MudTable>


        </MudPaper>
    </MudPaper>
    }



@code {
    public bool IsProcessing { get; set; } = false;
    private List<Product> _products = new();
    private List<Category> _categories = new();
    private Guid? DeleteProductId { get; set; } = null;
    private string? _imageUrl { get; set; } = null; 
    private string searchString = string.Empty;

    private bool FilterFunc(Product product)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        return product.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }

    protected override async Task OnInitializedAsync()
    {

        IsProcessing = true;
        await Task.Delay(500); // Simulate a delay for loading data
        _products = (await Repository.GetAllAsync()).ToList();
        _categories = (await CategoryRepository.GetAllAsync()).ToList();
        if (_categories != null && _categories.Any())
        {
            foreach (var product in _products)
            {
                var category = _categories.FirstOrDefault(c => c.Id == product.CategoryId); 
                if (category != null)
                {
                    product.Category = category;
                }
                else
                {
                    product.Category = new Category { Id = product.CategoryId, Name = "Unknown" };  
                }

            }
        }
        IsProcessing = false;
    }

    private async Task HandleDelete(Guid id)
    {
        DeleteProductId = id;
        var parameters = new DialogParameters
        {
            ["Title"] = "Are you sure you want to delete this product?",
            ["ButtonText"] = "Delete"
        };

        var options = new MudBlazor.DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };

        var dialog = DialogService.Show<MBDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            IsProcessing = true;
            _imageUrl = null;


                var productToDelete = _products.FirstOrDefault(p => p.Id == DeleteProductId.Value);
                if (productToDelete != null)
                {
                    _imageUrl = productToDelete.ImageUrl;
                    DeleteImage();
                }
                await Repository.DeleteAsync(DeleteProductId.Value);
            Snackbar.Add("Product Deleted", Severity.Success);
                _products = (await Repository.GetAllAsync()).ToList();
                _categories = (await CategoryRepository.GetAllAsync()).ToList();
                if (_categories != null && _categories.Any())
                {
                    foreach (var product in _products)
                    {
                        product.Category = _categories.First(c => c.Id == product.CategoryId);
                    }
                }

            
            DeleteProductId = null;
            IsProcessing = false;
        }
    }


 

    void DeleteImage()
    {
        if (_imageUrl == null) return;
        var fileToDelete = _imageUrl.Split('/').Reverse().First();
        var filePathToDeleteImage = Path.Combine(Path.Combine(WebHostEnvironment.WebRootPath, "lib", "images", "product"), fileToDelete);

        if (File.Exists(filePathToDeleteImage)) return;

        File.Delete(filePathToDeleteImage);

        return;
    }
 
}
