@inject IRepository<Product> Repository
@inject IRepository<Category> CategoryRepository    
@inject IJSRuntime JSRuntime
@page "/product"
@using System.Globalization
@inject IWebHostEnvironment WebHostEnvironment

<BSModal OnModalConfirmation="ConfirmDelete_Click" ButtonBootstrapStyle="btn-danger" ButtonText="Delete" Title="Are You Sure?" />
@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/lib/images/loading.gif" alt="loading" />
    </div>
}
else
{
   <div class="card shadow border-0 mt-4">
       <div class="card-header bg-black bg-gradient ms-lg-0 py-2">
           <div class="row">
               <div class="col-12 text-center">
                   <h2 class="text-white py-2">Product List</h2>
               </div>
           </div>
       </div>
       <div class="card-body p-4">
           <div class="row pb-3">
               <div class="col-12 text-end">
                    <a href="product/create" class="btn btn-large btn-secondary" style="width:200px;">
                        <i class="bi bi-plus-square"></i>
                        Add
                   </a>
               </div>
           </div>
            @if (_products.Any())
            {
                <table class="table table-striped table-bordered table-hover">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Price</th>
                            <th>Special Tag</th>
                            <th>Category</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var prod in _products)
                        {
                            <tr>
                                <td>@prod.Name</td>
                                <td>@prod.Price.ToString("C", CultureInfo.GetCultureInfo("en-us"))</td>
                                <td><span class="badge text-bg-info">@prod.SpecialTag</span></td>
                                <td>@prod.Category.Name</td>
                                <td class="text-end">
                                    <a href="@($"product/update/{prod.Id}")" class="btn btn-secondary" style="width:100px;">
                                        <i class="bi bi-pencil-square"></i>
                                        Edit
                             
                                     </a>
                                    <button class="btn btn-danger" style="width:100px;" @onclick="() => HandleDelete(prod.Id)">
                                        <i class="bi bi-trash3"></i>
                                        Delete
                                    </button>
                                </td>   
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
   </div> 
}

@code {
    public bool IsProcessing { get; set; } = false;
    private List<Product> _products = new();
    private List<Category> _categories = new();
    private Guid? DeleteProductId { get; set; } = null;
    private string? _imageUrl { get; set; } = null;  


    protected override async Task OnInitializedAsync()
    {

        IsProcessing = true;
        await Task.Delay(500); // Simulate a delay for loading data
        _products = (await Repository.GetAllAsync()).ToList();
        _categories = (await CategoryRepository.GetAllAsync()).ToList();
        if (_categories != null && _categories.Any())
        {
            foreach (var product in _products)
            {
                var category = _categories.FirstOrDefault(c => c.Id == product.CategoryId); 
                if (category != null)
                {
                    product.Category = category;
                }
                else
                {
                    product.Category = new Category { Id = product.CategoryId, Name = "Unknown" };  
                }

            }
        }
        IsProcessing = false;
    }

    private void HandleDelete(Guid id)
    {
        DeleteProductId = id;
        JSRuntime.InvokeVoidAsync("ShowConfirmationModal");
    }   

    private async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsProcessing = true;
        _imageUrl = null;
        await JSRuntime.InvokeVoidAsync("HideConfirmationModal");
        if (isConfirmed && DeleteProductId != null)
        {
            var productToDelete = _products.FirstOrDefault(p => p.Id == DeleteProductId.Value); 
            if (productToDelete != null)
            {
                _imageUrl = productToDelete.ImageUrl;
                DeleteImage();
            }
            await Repository.DeleteAsync(DeleteProductId.Value);
            await JSRuntime.ToastrSuccess("Product Deleted");
            _products = (await Repository.GetAllAsync()).ToList();
            _categories = (await CategoryRepository.GetAllAsync()).ToList();
            if (_categories != null && _categories.Any())
            {
                foreach (var product in _products)
                {
                    product.Category = _categories.First(c => c.Id == product.CategoryId);
                }
            }
           
        }
        DeleteProductId = null;
        IsProcessing = false;
    }

    void DeleteImage()
    {
        if (_imageUrl == null) return;
        var fileToDelete = _imageUrl.Split('/').Reverse().First();
        var filePathToDeleteImage = Path.Combine(Path.Combine(WebHostEnvironment.WebRootPath, "lib", "images", "product"), fileToDelete);

        if (File.Exists(filePathToDeleteImage)) return;

        File.Delete(filePathToDeleteImage);

        return;
    }
 
}
