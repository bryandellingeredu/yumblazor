@page "/product/create"
@page "/product/update/{id:guid}"
@inject IRepository<Product> Repository
@inject IRepository<Category> CategoryRepository
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment WebHostEnvironment  

@if (IsProcessing)
{
    <MudPaper Class="d-flex flex-column align-items-center justify-center" Style="height: 100vh; width: 100%;">
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Diameter="100" />
    </MudPaper>
}
else
{
    <MudContainer MaxWidth="MaxWidth.False" Class="d-flex justify-center mt-6">
          <MudPaper Class="p-6" Style="width: 80%; max-width: 1000px;">
               <MudForm @ref="_form" Class="p-4">
                <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">
                    @(Id != null ? "Update Product" : "Create Product")
                </MudText>

                <MudTextField Label="Name"
                              For="@(() => Product.Name)"
                              @bind-Value="Product.Name"
                              Required="true"
                              Immediate="true"
                              Variant="MudBlazor.Variant.Outlined"
                              FullWidth="true"
                              Class="mb-4" />


                <MudStack Spacing="2" Class="mb-4">
                    <MudText Typo="Typo.subtitle1">Description</MudText>

                    @if (_isDarkMode)
                    {
                        <style>
                            .rz-html-editor-content {
                                background-color: #2a2a2a !important;
                                color: #e0e0e0 !important;
                            }
                        </style>
                    }

                    <RadzenHtmlEditor @bind-Value="Product.Description"
                                      Style="height: 300px; border: 1px solid rgba(0, 0, 0, 0.23); border-radius: 4px; padding: 8px;" />
                </MudStack>
         

                <MudTextField Label="Price"
                              @bind-Value="Product.Price"
                              Required="true"
                              InputType="InputType.Number"
                              FullWidth="true"
                              Class="mb-4" />

                <MudTextField Label="Special Tag"
                              @bind-Value="Product.SpecialTag"
                              FullWidth="true"
                              Class="mb-4" />

                <MudSelect T="Guid" Label="Category" @bind-Value="Product.CategoryId" Required="true" FullWidth="true" Class="mb-4">
                    <MudSelectItem T="Guid" Value="@Guid.Empty" Disabled="true">--Select Category--</MudSelectItem>
                    @foreach (var category in _categories)
                    {
                        <MudSelectItem T="Guid" Value="@category.Id">@category.Name</MudSelectItem>
                    }
                </MudSelect>

                @if (Product.ImageUrl == null)
                {
                    @if (showUploader)
                    {
                        @if (showUploader)
                        {
                            <MudStack Style="width: 100%">
                                <MudFileUpload T="IBrowserFile"
                                               OnFilesChanged="OnInputFileChanged"
                                               Hidden="false"
                                               InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
                                               InputStyle="opacity:0"
                                               tabindex="-1"
                                               @ondrop="@ClearDragClass"
                                               @ondragenter="@SetDragClass"
                                               @ondragleave="@ClearDragClass"
                                               @ondragend="@ClearDragClass">
                                    <ActivatorContent>
                                        <MudPaper Height="300px" Outlined="true" Class="@_dragClass">
                                            <MudText Typo="Typo.h6">Drag and drop a file here or click to upload</MudText>
                                        </MudPaper>
                                    </ActivatorContent>
                                </MudFileUpload>
                                <MudButton Color="Color.Secondary" OnClick="() => showUploader = false">Cancel Image Upload</MudButton>
                            </MudStack>
                        }
                    }
                    else
                    {
                        <MudButton OnClick="() => showUploader = true" Variant="MudBlazor.Variant.Outlined" Color="Color.Primary">
                            Upload Image
                        </MudButton>
                    }
                }
                else
                {
                    <MudPaper Class="pa-2 mt-2 d-flex align-center">
                        <MudImage Src="@Product.ImageUrl" Alt="Product Image" Style="max-width: 200px; max-height: 200px;" />
                        <MudButton Variant="MudBlazor.Variant.Outlined" Color="Color.Error" OnClick="DeleteImage" Class="ms-4">
                            Remove
                        </MudButton>
                    </MudPaper>
                }

                <MudStack Row="true" Justify="Justify.FlexEnd" Spacing="2" Class="mt-6">
                    <MudButton Href="/product" Color="Color.Secondary" Variant="MudBlazor.Variant.Text" StartIcon="@Icons.Material.Filled.ArrowBack">Cancel</MudButton>
                    <MudButton Color="Color.Primary" Variant="MudBlazor.Variant.Filled" Disabled="IsProcessing" OnClick="HandleSubmit" StartIcon="@Icons.Material.Filled.Save">Save</MudButton>
                </MudStack>

               </MudForm>

          </MudPaper>
    </MudContainer>

}


@code {
    [Parameter]
    public Guid? Id { get; set; } = null;

    private bool IsProcessing { get; set; } = false;
    private string? _directoryPath { get; set; } = null;    

    [SupplyParameterFromForm]
    private Product Product { get; set; } = new Product { Description = "" };

    private IEnumerable<Category> _categories { get; set; } = new List<Category>();

    private MudForm? _form;

    private bool showUploader = false;

    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;

    private void SetDragClass() => _dragClass = $"{DefaultDragClass} mud-border-primary";
    private void ClearDragClass() => _dragClass = DefaultDragClass;

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        await LoadFiles(e); // your existing logic to process image
        showUploader = false;
    }

    [CascadingParameter]
    private bool _isDarkMode { get; set; }
   
    private async Task HandleSubmit()
    {
        if (_form is not null)
        {
            await _form.Validate();

            if (_form.IsValid)
            {
                await UpsertProduct();
            }
        }
    }

    private async Task UpsertProduct()
    {
        Product.Category = null;
        IsProcessing = true;
        if (Id.HasValue)
        {
            await Repository.UpdateAsync(Product);
           // await JsRuntime.ToastrSuccess("Product Updated Successfully");
        }
        else
        {
            await Repository.AddAsync(Product);
            //await JsRuntime.ToastrSuccess("Product Created Successfully");
        }
        IsProcessing = false;
        NavigationManager.NavigateTo("product");
    }

    protected override async Task OnParametersSetAsync()
    {
        IsProcessing = true;
        if (Id.HasValue)
        {
            // Fetch the product by Id here. Example:
            var product = await Repository.GetByIdAsync(Id.Value);
            if (product != null)
            {
                Product = product;
            }

        }
        _categories = await CategoryRepository.GetAllAsync();

        IsProcessing = false;
    }

    protected override Task OnInitializedAsync()
    {
        _directoryPath = Path.Combine(WebHostEnvironment.WebRootPath, "lib", "images", "product"); 
        return base.OnInitializedAsync();
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        IsProcessing = true;
        var file = e.File;
        System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name); 
        var newFileName = $"{Guid.NewGuid()}{fileInfo.Extension}";  
        if(!Directory.Exists(_directoryPath))
        {
            Directory.CreateDirectory(_directoryPath ?? Path.Combine(WebHostEnvironment.WebRootPath, "lib", "images", "product"));
        }
        var path = Path.Combine(_directoryPath ?? Path.Combine(WebHostEnvironment.WebRootPath, "lib", "images", "product"), newFileName);

        await using FileStream fileStream = new(path, FileMode.Create);
        await file.OpenReadStream(file.Size).CopyToAsync(fileStream);
        Product.ImageUrl = $"/lib/images/product/{newFileName}"; // Set the image URL for the product
        IsProcessing = false;
    }   

    void DeleteImage()
    {
        if (Product.ImageUrl == null) return;
        var fileToDelete = Product.ImageUrl.Split('/').Reverse().First();
        var filePathToDeleteImage = Path.Combine(_directoryPath ?? Path.Combine(WebHostEnvironment.WebRootPath, "lib", "images", "product"), fileToDelete);

        if (File.Exists(filePathToDeleteImage)) return;

        File.Delete(filePathToDeleteImage);

        Product.ImageUrl = null;
        return;
    }

}
