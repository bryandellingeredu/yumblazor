@page "/category/create"
@page "/category/update/{id:guid}"
@inject IRepository<Category> Repository
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

@if (IsProcessing)
{
    <MudPaper Class="d-flex flex-column align-items-center justify-center" Style="height: 100vh; width: 100%;">
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Diameter="100" />
    </MudPaper>
}
else
{
    <MudContainer MaxWidth="MaxWidth.False" Class="d-flex justify-center mt-6">
        <MudPaper Class="p-6" Style="width: 80%; max-width: 1000px;">
            <MudForm @ref="_form" Class="p-4">
                <!-- Add padding here -->
                <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">
                    @(Id != null ? "Update Category" : "Create Category")
                </MudText>

                <MudTextField Label="Name"
                              For="@(() => Category.Name)"
                              @bind-Value="Category.Name"
                              Required="true"
                              Immediate="true"
                              Variant="MudBlazor.Variant.Outlined"
                              FullWidth="true"
                              Class="mb-4" /> <!-- Just margin here -->

                <MudStack Row="true" Justify="Justify.FlexEnd" Spacing="2">
                    <MudButton Color="Color.Secondary"
                               Variant="MudBlazor.Variant.Text"
                               Href="/category"
                               StartIcon="@Icons.Material.Filled.ArrowBack">
                        Cancel
                    </MudButton>

                    <MudButton Color="Color.Primary"
                               Variant="MudBlazor.Variant.Filled"
                               Disabled="IsProcessing"
                               OnClick="HandleSubmit"
                               StartIcon="@Icons.Material.Filled.Save">
                        Save
                    </MudButton>
                </MudStack>
            </MudForm>
        </MudPaper>
    </MudContainer>

}


@code {
    [Parameter]
    public Guid? Id { get; set; } = null;

    private bool IsProcessing { get; set; } = false;

    [SupplyParameterFromForm]
    private Category Category { get; set; } = new Category();

    private MudForm? _form;

    private async Task HandleSubmit()
    {
        if (_form is not null)
        {
            await _form.Validate();

            if (_form.IsValid)
            {
                await UpsertCategory();
            }
        }
    }

    private async Task UpsertCategory()
    {
        IsProcessing = true;
        if (Id.HasValue)
        {
            await Repository.UpdateAsync(Category);
            Snackbar.Add("Category Updated Successfully", Severity.Success);

        }
        else
        {
            await Repository.AddAsync(Category);
            Snackbar.Add("Category Created Successfully", Severity.Success);
        }
        IsProcessing = false;
        NavigationManager.NavigateTo("category");
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id.HasValue)
        {
            IsProcessing = true;

            // Fetch the category by Id here. Example:
            var category = await Repository.GetByIdAsync(Id.Value);
            if (category != null)
            {
                Category = category;
            }

            IsProcessing = false;
        }
    }

}
