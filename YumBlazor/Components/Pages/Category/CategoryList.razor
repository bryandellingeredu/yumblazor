@inject IRepository<Category> Repository
@inject IJSRuntime JSRuntime
@page "/category"
@inject IDialogService DialogService


@if (IsProcessing)
{
    <MudPaper Class="d-flex flex-column align-items-center justify-center" Style="height: 100vh; width: 100%;">
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Diameter="100" />
    </MudPaper>
}
else
{
    <MudPaper Class="shadow mt-4">
        <MudPaper Class="bg-black py-2 px-3">
            <MudText Typo="Typo.h5" Align="Align.Center" Class="text-white">
                Category List
            </MudText>
        </MudPaper>


        <MudPaper Class="p-4" Style="width: 100%;">
            <MudStack Row="true" Justify="Justify.FlexEnd" Class="pb-3">
                <MudButton Variant="MudBlazor.Variant.Filled"
                           Color="Color.Secondary"
                           StartIcon="@Icons.Material.Filled.Add"
                           Href="category/create"
                           Style="width:200px;">
                    Add
                </MudButton>
            </MudStack>

            <MudTextField @bind-Value="searchString"
                          Placeholder="Search by name"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          Margin="Margin.Dense"
                          Class="mb-3" />

            <MudTable Items="_categories"
                      Filter="FilterFunc"
                      RowsPerPage="10"
                      Hover="true"
                      Bordered="true"
                      Striped="true"
                      Dense="true"
                      SortLabel="Sort By">

                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<Category, object>(x => x.Name)">
                            Name
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh></MudTh>
                </HeaderContent>

                <RowTemplate>
                    <MudTd DataLabel="Name">@context.Name</MudTd>
                    <MudTd Align="Right">
                         <MudStack Row="true" Justify="Justify.FlexEnd" Spacing="2">
                            <MudButton Variant="MudBlazor.Variant.Filled"
                                       Color="Color.Secondary"
                                       StartIcon="@Icons.Material.Filled.Edit"
                                       Href="@($"category/update/{context.Id}")"
                                       Style="width: 100px;">
                                Edit
                            </MudButton>
                            <MudButton Variant="MudBlazor.Variant.Filled"
                                       Color="Color.Error"
                                       StartIcon="@Icons.Material.Filled.Delete"
                                       OnClick="@(() => HandleDelete(context.Id))"
                                       Style="width: 100px;">
                                Delete
                            </MudButton>
                        </MudStack>
                    </MudTd>
                </RowTemplate>

                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>

        </MudPaper>
    </MudPaper>

}

@code {
    public bool IsProcessing { get; set; } = false;
    private List<Category> _categories = new();
    private Guid? DeleteCategoryId { get; set; } = null;

    private string searchString = string.Empty;

    private bool FilterFunc(Category category)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        return category.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }

    protected override async Task OnInitializedAsync()
    {

        IsProcessing = true;
        _categories = (await Repository.GetAllAsync()).ToList();
        IsProcessing = false;
    }



    private async Task HandleDelete(Guid id)
    {
    var parameters = new DialogParameters
        {
            ["Title"] = "Are you sure you want to delete this category?",
            ["ButtonText"] = "Delete"
        };

    var options = new MudBlazor.DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };

        var dialog = DialogService.Show<MBDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            IsProcessing = true;
            await Repository.DeleteAsync(id);
            await JSRuntime.ToastrSuccess("Category Deleted");
            _categories = (await Repository.GetAllAsync()).ToList();
            IsProcessing = false;
        }
    }
 
}
